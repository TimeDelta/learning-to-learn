# Generated by ChatGPT
from typing import Dict, List, Tuple

import torch
import torch.nn as nn
from torch.nn.parameter import Parameter


class LAMBBackprop(nn.Module):
    moment1: Dict[str, torch.Tensor] = torch.jit.Attribute({}, Dict[str, torch.Tensor])
    moment2: Dict[str, torch.Tensor] = torch.jit.Attribute({}, Dict[str, torch.Tensor])

    def __init__(self, step_size: float = 0.01, beta1: float = 0.9, beta2: float = 0.999, eps: float = 1e-6):
        super(LAMBBackprop, self).__init__()
        self.step_size = step_size
        self.beta1 = beta1
        self.beta2 = beta2
        self.eps = eps
        self.step = 0
        self.moment1: Dict[str, torch.Tensor] = {}
        self.moment2: Dict[str, torch.Tensor] = {}

    def forward(
        self, loss: torch.Tensor, prev_loss: torch.Tensor, named_parameters: List[Tuple[str, Parameter]]
    ) -> Dict[str, torch.Tensor]:
        self.step += 1
        params = [param for _, param in named_parameters]
        grads = torch.autograd.grad([loss], params, create_graph=False, allow_unused=True)
        new_params: Dict[str, torch.Tensor] = {}
        for (name, param), grad in zip(named_parameters, grads):
            if grad is None:
                grad = torch.zeros_like(param)
            # Initialize first and second moment if needed
            if name not in self.moment1:
                self.moment1[name] = torch.zeros_like(param)
                self.moment2[name] = torch.zeros_like(param)
            m = self.moment1[name]
            v = self.moment2[name]
            # Adam moments
            m = self.beta1 * m + (1 - self.beta1) * grad
            v = self.beta2 * v + (1 - self.beta2) * (grad * grad)
            # Bias correction
            m_hat = m / (1 - self.beta1**self.step)
            v_hat = v / (1 - self.beta2**self.step)
            # Compute trust ratio
            w_norm = torch.norm(param)
            u = m_hat / (torch.sqrt(v_hat) + self.eps)
            u_norm = torch.norm(u)
            # Safe-guard against zero norm
            if w_norm > 0 and u_norm > 0:
                r = w_norm / u_norm
            else:
                r = torch.tensor(1.0, dtype=u.dtype, device=u.device)
            new_params[name] = param - self.step_size * r * u
            self.moment1[name] = m
            self.moment2[name] = v
        return new_params


if __name__ == "__main__":
    optimizer = torch.jit.script(LAMBBackprop())
    torch.jit.save(optimizer, __file__.replace(".py", ".pt"))
    print(optimizer.graph)
